<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Blog</title>
    <link href="https://cthulehansen.github.io/blog/atom.xml" rel="self" type="application/rss+xml" />
  <updated>2022-09-26T19:26:SZ</updated>
  <author>
      <name>Casper Thule</name>
  </author>
  <id>https://cthulehansen.github.io/blog/</id>

  <entry>
      <title>Haskell Templates</title>
      <link href="https://cthulehansen.github.io/blogposts/goal.html"/>
      <id>https://cthulehansen.github.io/blogposts/goal.html</id>
      <updated>2022-09-26T00:00:SZ</updated>
      <category term="Haskell"/>
      <category term="Book"/>
      <summary>Templates for typical and necessary parts of an application</summary>
      <content type="html"><![CDATA[<p>My current goal of Haskell learning is to generate templates for different typical parts of an application:</p>
<ul>
<li>JSON/YAML parsing and writing</li>
<li>Error Reporting including:
<ul>
<li>Logging to file</li>
</ul></li>
<li>Passing Environment</li>
<li>State-handling</li>
<li>CRUD</li>
<li>Database access</li>
<li>CLI options</li>
<li>Testing</li>
<li>Network Communication</li>
<li>CI for Haskell</li>
<li>My GHC options</li>
</ul>]]></content>
  </entry>
  <entry>
      <title>Learn Haskell by Building a Blog Generator</title>
      <link href="https://cthulehansen.github.io/blogposts/lhbg.html"/>
      <id>https://cthulehansen.github.io/blogposts/lhbg.html</id>
      <updated>2022-09-26T00:00:SZ</updated>
      <category term="Haskell"/>
      <category term="Book"/>
      <category term="Beginner"/>
      <category term="Options Parsing"/>
      <summary>My impression of the book Learn Haskell by Building a Blog Generator</summary>
      <content type="html"><![CDATA[<p>I have recently gone through <a href="http://lhbg-book.link" class="uri">http://lhbg-book.link</a> associated with <a href="https://github.com/soupi/learn-haskell-blog-generator" class="uri">https://github.com/soupi/learn-haskell-blog-generator</a>. It was an absolute pleasure. I will not go through it in detail, just mention a few things I stumbled upon.</p>
<h2 id="applicative-introduction-and-type-catch-up">Applicative introduction and type catch-up</h2>
<p>The applicative introduction in <a href="https://lhbg-book.link/05-glue/04-optparse.html" class="uri">https://lhbg-book.link/05-glue/04-optparse.html</a> was a well-guided leap. A small, but VERY important part, was the type listing along the way:</p>
<pre><code>pConvertSingle :: Parser Options

pInputFile :: Parser SingleInput
pOutputFile :: Parser SingleOutput

ConvertSingle :: SingleInput -&gt; SingleOutput -&gt; Options

(&lt;$&gt;) :: (a -&gt; b) -&gt; Parser a -&gt; Parser b
  -- Specifically, here `a` is `SingleInput`
  -- and `b` is `SingleOutput -&gt; Options`,

ConvertSingle &lt;$&gt; pInputFile :: Parser (SingleOutput -&gt; Options)

(&lt;*&gt;) :: Parser (a -&gt; b) -&gt; Parser a -&gt; Parser b
  -- Specifically, here `a -&gt; b` is `SingleOutput -&gt; Options`
  -- so `a` is `SingleOutput` and `b` is `Options`

-- So we get:
(ConvertSingle &lt;$&gt; pInputFile) &lt;*&gt; pOutputFile :: Parser Options</code></pre>
<p>The reason why I so enjoyed the type catch-up is that functions inside a Parser is less intuitive than functions inside a list. For me, it is significantly more easy to relate to a list of functions, than a parser of <code>a -&gt; b</code>, as the parser does not parse functions. Instead, it is a parser that is still lacking an argument to parse what is desired. At this point it is important to "follow the types", which the type catch-up helped a lot in achieving.</p>
<h2 id="missing-exercises">Missing exercises</h2>
<p>I was looking forward to "Handling errors and multiple files" as I hoped to get to write the glue that connects Haskell to the outside world. Unfortunately, it was a lot of reading with very little coding from my part. I had hoped for some exercises (finally) in "Lets code already!", but this was unfortunately not the case. Up till this point, I have enjoyed the exercise-approach to learning, but this section did not follow this recipe.</p>
<h2 id="fancy-options-parsing-section">Fancy Options Parsing Section</h2>
<p>By coincidence I stumbled upon contributing to Cli library after going through this guide and I have visited the section called Fancy Options Parsing many times. It is well-described!</p>
<h2 id="build-error">Build error</h2>
<p>Upon creating a new module in <a href="https://lhbg-book.link/03-html/05-modules.html" class="uri">https://lhbg-book.link/03-html/05-modules.html</a> HLS presented the following error on <code>module Html</code>:</p>
<pre><code>Multi Cradle: No prefixes matched
pwd: /home/ctm/source/lhbd
filepath: /home/ctm/source/lhbd/app/Html.hs
prefixes:
(&quot;app/Main.hs&quot;,Cabal {component = Just &quot;lhbd:exe:lhbd&quot;})
cradle</code></pre>
<p>I solved this by adding <code>other-modules: Html</code> to the related cabal file.</p>
<p>Many of the guides suggests creating an hie.yaml file, e.g. <a href="https://github.com/haskell/haskell-language-server/issues/1215" class="uri">https://github.com/haskell/haskell-language-server/issues/1215</a> I did not attempt this, as it seemed strange that it should be necessary, thus I stuck to my solution above. Thus, I believe the reason is that there is not path from Main.hs to Html.hs. Once a path, e.g. via imports, exists, then this error does not occur.</p>
<p>The book does not discuss creating a cabal file at this point, so following the book without doing manual stuff on the side would probably not present this error.</p>
<h2 id="summary">Summary</h2>
<p>I enjoyed the book a lot. Every once in a while it was necessary for me to write up a mind map to keep track of the different sections and I had a few issues on figuring out which file to place the code for the exercises in. Sometimes this was annoying, and at other times I considered it part of the challenge.</p>
<p>Improvement potential for the book could be a better feel for how the pieces fit together, perhaps by more manual testing.</p>
<p>Thanks for a great book with a good pace that I really enjoyed. Especially the section on fancy options parsing.</p>]]></content>
  </entry>
  <entry>
      <title>Sample Post</title>
      <link href="https://cthulehansen.github.io/blogposts/sample-post.html"/>
      <id>https://cthulehansen.github.io/blogposts/sample-post.html</id>
      <updated>2019-01-01T00:00:SZ</updated>
      <category term="slick"/>
      <category term="site"/>
      <summary>My first blog post using slick</summary>
      <content type="html"><![CDATA[<p>Welcome to your first blog post!</p>]]></content>
  </entry>
</feed>
